// IMMEDIATELY INVOKE FUNCTION IS USED WHEN YOU IMMEDIATELY CALL THE FUNCTION AFTER DEFINING IT.

// YOU DO NOT NEED TO CALL IMMEDIATELY INVOKE FUNCTION SAPERATELY, IT WILL EXECUTE IMMEDIATELY ONCE THE COMPILER REACH TO IT.


/* 
SYNTAX: (ANONYMOUS FUNCTION)();
=> WHERE '()' AT THE LAST IS USED TO INVOKE THE FUNCTION. 

EX: (function (){
        alert("hello");
    })(); // INVOKE THE FUNCTION

*/

// ----------------------------------------------------------------

/* THIS CODE IS VERY EFFICIENT BECAUSE 
    1) IT WILL IMMEDIATELY INVOKE THE FUNCTION WITHOUT STORING THE NAME OF A FUNCTION INTO A MEMORY BECAUSE IT USES ANONYMOUS FUNCTION.

    2) LOCAL VARIABLE WILL ALSO NOT STORE INTO A MEMORY THROUGHOUT THE WHOLE PROGRAM.

    MEANS: ONCE COMPILER REACH THE END OF THIS FUNCTION, LOCAL VARIABLE AND THIS FUNCTION BOTH WILL REMOVE FROM THE MEMORY.
    
    RESULT: FASTER EXECUTION AND LESS MEMORY OCCUPATION.
 */

// THE USAGE OF THIS CODE IS ONLY NEED FOR NEXT FEW MINUTES OR A LINE THEN WE MUST USE ANONYMOUS FUNCTION INSIDE THE IMMEDIATELY INVOKE FUNCTION.

let str = "Nehal"; // GLOBAL VARIABLE 
// IT WON'T THROUGH AN ERROR BECAUSE LOCAL VARIABLE WILL BE DELETED AFTER THE SCOPE WILL FINISH.

(function (){
    let str = "Nehal"; // LOCAL VARIABLE

    alert(str);
    document.write(str);
    console.log(str);
})
(); // INVOKE THE FUNCTION AND END OF THE BLOCK.



/*
          ADVANCE USAGE OF IMMEDIATE INVOKE FUNCTION

=> WHEN WE USE EXTERNAL LIBRABY IN OUR CODE AND PROPERTIES OF THAT THIRD PARTY LIBRARY (VARIABLES AND FUNCTIONS) HAVE THE SAME NAME AS WE DEFINED IN OUR OWN CODE THEN IT WILL THROUGH AN ERROR.


----- SCRIPT.JS ------ FILE 1 -------

let message = "Hello Script users";

function display(){
    console.log(message);
}

display();


----- THIRDPARTY.JS ------ FILE 2 -------

let message = "Hello third party users";

function display(){
    console.log(message);
}

display();

--------------------------------------------------
IF WE INCLUDE THESE BOTH FILE INTO OUR HTML FILE.

<script src="SCRIPT.JS/script.js"></script>
<script src="THIRDPARTY.JS/script.js"></script>
--------------------------------------------------

THEN IT WILL GIVE AN ERROR BECAUSE NAME OF VARIABLE AND FUNCTION ARE SAME AND IT WILL CREATE CONFLICT FOR THE COMPILER.

WHEN WE USE THIRD PARTY LIBRARY IN TO OUR CODE, WE NEVER READ WHOLE CODE CAREFULLY AND WE USUALLY DO NOT KNOW THAT WHICH NAME OF VARIABLE AND FUNCTION IS USED IN THAT CODE.

------- SOLUTION -------

USE AUTO INVOKE (IMMEDIATE INVOKE) FUNCTION USING ANONYMOUS FUNCTION.
(FIT IT INTO ANONMYOUS FUNCTION AND THEN CALL IT USING AUTO INVOKE)

----- THIRDPARTY.JS ------

(function ()
{
    let message = "Hello third party users";

    function display(){
        console.log(message);
    }

    display();
})
(); // INVOKE

------

THESE WON'T CREATE CONFLICT FOR THE COMPILER, ALTHOUGH BOTH FILE HAS SAME NAME OF VARIABLES AND FUNCTIONS AND IT WILL NOT PRINT AN ERROR: BOTH FILE WILL EXECUTE AND GIVE OUTPUT.

REASON: THIRDPARTY.JS WILL IMMEDIATELY INVOKE AND DELETE FROM THE MEMORY ONCE THE COMPILER REACH END OF THE BLOCK.

*/